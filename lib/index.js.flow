// @flow

import type {Direction, OnStartCallback} from "./resizer";
import Resizer from "./resizer";
import isEqual from "lodash.isequal";
import React, {Component} from "react";
declare class Class0 extends Element<> {

  accessKey: string;
  accessKeyLabel: string;
  className: string;
  contentEditable: string;
  contextMenu: ?HTMLMenuElement;
  dataset: {[key: string]: string};
  dir: "ltr" | "rtl" | "auto";
  draggable: boolean;
  dropzone: any;
  hidden: boolean;
  id: string;
  innerHTML: string;
  isContentEditable: boolean;
  itemProp: any;
  itemScope: boolean;
  itemType: any;
  itemValue: Object;
  lang: string;
  offsetHeight: number;
  offsetLeft: number;
  offsetParent: Element;
  offsetTop: number;
  offsetWidth: number;
  onabort: ?Function;
  onblur: ?Function;
  oncancel: ?Function;
  oncanplay: ?Function;
  oncanplaythrough: ?Function;
  onchange: ?Function;
  onclick: ?Function;
  oncuechange: ?Function;
  ondblclick: ?Function;
  ondurationchange: ?Function;
  onemptied: ?Function;
  onended: ?Function;
  onerror: ?Function;
  onfocus: ?Function;
  oninput: ?Function;
  oninvalid: ?Function;
  onkeydown: ?Function;
  onkeypress: ?Function;
  onkeyup: ?Function;
  onload: ?Function;
  onloadeddata: ?Function;
  onloadedmetadata: ?Function;
  onloadstart: ?Function;
  onmousedown: ?Function;
  onmouseenter: ?Function;
  onmouseleave: ?Function;
  onmousemove: ?Function;
  onmouseout: ?Function;
  onmouseover: ?Function;
  onmouseup: ?Function;
  onmousewheel: ?Function;
  onpause: ?Function;
  onplay: ?Function;
  onplaying: ?Function;
  onprogress: ?Function;
  onratechange: ?Function;
  onreadystatechange: ?Function;
  onreset: ?Function;
  onresize: ?Function;
  onscroll: ?Function;
  onseeked: ?Function;
  onseeking: ?Function;
  onselect: ?Function;
  onshow: ?Function;
  onstalled: ?Function;
  onsubmit: ?Function;
  onsuspend: ?Function;
  ontimeupdate: ?Function;
  ontoggle: ?Function;
  onvolumechange: ?Function;
  onwaiting: ?Function;
  properties: any;
  spellcheck: boolean;
  style: CSSStyleDeclaration;
  tabIndex: number;
  title: string;
  translate: boolean;
  blur(): void;
  click(): void;
  focus(): void;
  forceSpellcheck(): void;
  getBoundingClientRect(): ClientRect;
}
declare class Class1 extends SyntheticUIEvent<> {

  altKey: boolean;
  button: number;
  buttons: number;
  clientX: number;
  clientY: number;
  ctrlKey: boolean;
  getModifierState: any;
  metaKey: boolean;
  pageX: number;
  pageY: number;
  relatedTarget: EventTarget;
  screenX: number;
  screenY: number;
  shiftKey: boolean;
}
declare class Class2 extends SyntheticUIEvent<> {

  altKey: boolean;
  changedTouches: any;
  ctrlKey: boolean;
  getModifierState: any;
  metaKey: boolean;
  shiftKey: boolean;
  targetTouches: any;
  touches: any;
}
declare class Class3 extends UIEvent<> {

  altKey: boolean;
  button: number;
  buttons: number;
  clientX: number;
  clientY: number;
  ctrlKey: boolean;
  metaKey: boolean;
  movementX: number;
  movementY: number;
  offsetX: number;
  offsetY: number;
  pageX: number;
  pageY: number;
  region: ?string;
  relatedTarget: ?EventTarget;
  screenX: number;
  screenY: number;
  shiftKey: boolean;
  constructor(typeArg: string, mouseEventInit?: {altKey?: boolean, button?: number, buttons?: number, clientX?: number, clientY?: number, ctrlKey?: boolean, metaKey?: boolean, region?: string | null, relatedTarget?: string | null, screenX?: number, screenY?: number, shiftKey?: boolean}): void;
  getModifierState(keyArg: string): boolean;
}
declare class Class4 extends UIEvent<> {

  altKey: boolean;
  changedTouches: TouchList;
  ctrlKey: boolean;
  metaKey: boolean;
  shiftKey: boolean;
  targetTouches: TouchList;
  touches: TouchList;
}
declare export default class extends Component {
  static defaultProps: {enable: {bottom: boolean, bottomLeft: boolean, bottomRight: boolean, left: boolean, right: boolean, top: boolean, topLeft: boolean, topRight: boolean}, grid: [number, number], lockAspectRatio: boolean, onResize: () => void, onResizeStart: () => void, onResizeStop: () => void, style: {}};

  onMouseMove: (event: Class3 | Class4, direction: "top" | "right" | "bottom" | "left" | "topRight" | "bottomRight" | "bottomLeft" | "topLeft", refToElement: Class0, delta: {height: number, width: number}) => void;
  onMouseUp: (event: Class3 | Class4, direction: "top" | "right" | "bottom" | "left" | "topRight" | "bottomRight" | "bottomLeft" | "topLeft", refToElement: Class0, delta: {height: number, width: number}) => void;
  onResizeStart: (e: Class1 | Class2, dir: "top" | "right" | "bottom" | "left" | "topRight" | "bottomRight" | "bottomLeft" | "topLeft") => void;
  onTouchMove: (event: Class3 | Class4, direction: "top" | "right" | "bottom" | "left" | "topRight" | "bottomRight" | "bottomLeft" | "topLeft", refToElement: Class0, delta: {height: number, width: number}) => void;
  props: {bounds?: "parent" | "window" | Class0, children?: any, className?: string, enable?: {bottom?: boolean, bottomLeft?: boolean, bottomRight?: boolean, left?: boolean, right?: boolean, top?: boolean, topLeft?: boolean, topRight?: boolean}, extendsProps?: any, grid?: [number, number], handlerClasses?: {bottom?: string, bottomLeft?: string, bottomRight?: string, left?: string, right?: string, top?: string, topLeft?: string, topRight?: string, wrapper?: string}, handlerStyles?: {bottom?: any, bottomLeft?: any, bottomRight?: any, left?: any, right?: any, top?: any, topLeft?: any, topRight?: any, wrapper?: any}, height?: string | number, lockAspectRatio?: boolean, maxHeight?: number, maxWidth?: number, minHeight?: number, minWidth?: number, onResize?: (event: Class3 | Class4, direction: "top" | "right" | "bottom" | "left" | "topRight" | "bottomRight" | "bottomLeft" | "topLeft", refToElement: Class0, delta: {height: number, width: number}) => void, onResizeStart?: (e: Class1 | Class2, dir: "top" | "right" | "bottom" | "left" | "topRight" | "bottomRight" | "bottomLeft" | "topLeft", refToElement: Class0) => void, onResizeStop?: (event: Class3 | Class4, direction: "top" | "right" | "bottom" | "left" | "topRight" | "bottomRight" | "bottomLeft" | "topLeft", refToElement: Class0, delta: {height: number, width: number}) => void, style?: any, width?: string | number};
  resizable: Class0;
  get size(): {height: number, width: number};
  state: {direction: "top" | "right" | "bottom" | "left" | "topRight" | "bottomRight" | "bottomLeft" | "topLeft", height: number | string, isResizing: boolean, original: {height: number, width: number, x: number, y: number}, width: number | string};
  get style(): {height: string, width: string};
  componentDidMount(): void;
  componentWillReceiveProps(_: {bounds?: "parent" | "window" | Class0, children?: any, className?: string, enable?: {bottom?: boolean, bottomLeft?: boolean, bottomRight?: boolean, left?: boolean, right?: boolean, top?: boolean, topLeft?: boolean, topRight?: boolean}, extendsProps?: any, grid?: [number, number], handlerClasses?: {bottom?: string, bottomLeft?: string, bottomRight?: string, left?: string, right?: string, top?: string, topLeft?: string, topRight?: string, wrapper?: string}, handlerStyles?: {bottom?: any, bottomLeft?: any, bottomRight?: any, left?: any, right?: any, top?: any, topLeft?: any, topRight?: any, wrapper?: any}, height?: string | number, lockAspectRatio?: boolean, maxHeight?: number, maxWidth?: number, minHeight?: number, minWidth?: number, onResize?: (event: Class3 | Class4, direction: "top" | "right" | "bottom" | "left" | "topRight" | "bottomRight" | "bottomLeft" | "topLeft", refToElement: Class0, delta: {height: number, width: number}) => void, onResizeStart?: (e: Class1 | Class2, dir: "top" | "right" | "bottom" | "left" | "topRight" | "bottomRight" | "bottomLeft" | "topLeft", refToElement: Class0) => void, onResizeStop?: (event: Class3 | Class4, direction: "top" | "right" | "bottom" | "left" | "topRight" | "bottomRight" | "bottomLeft" | "topLeft", refToElement: Class0, delta: {height: number, width: number}) => void, style?: any, width?: string | number}): void;
  componentWillUnmount(): void;
  constructor(props: {bounds?: "parent" | "window" | Class0, children?: any, className?: string, enable?: {bottom?: boolean, bottomLeft?: boolean, bottomRight?: boolean, left?: boolean, right?: boolean, top?: boolean, topLeft?: boolean, topRight?: boolean}, extendsProps?: any, grid?: [number, number], handlerClasses?: {bottom?: string, bottomLeft?: string, bottomRight?: string, left?: string, right?: string, top?: string, topLeft?: string, topRight?: string, wrapper?: string}, handlerStyles?: {bottom?: any, bottomLeft?: any, bottomRight?: any, left?: any, right?: any, top?: any, topLeft?: any, topRight?: any, wrapper?: any}, height?: string | number, lockAspectRatio?: boolean, maxHeight?: number, maxWidth?: number, minHeight?: number, minWidth?: number, onResize?: (event: Class3 | Class4, direction: "top" | "right" | "bottom" | "left" | "topRight" | "bottomRight" | "bottomLeft" | "topLeft", refToElement: Class0, delta: {height: number, width: number}) => void, onResizeStart?: (e: Class1 | Class2, dir: "top" | "right" | "bottom" | "left" | "topRight" | "bottomRight" | "bottomLeft" | "topLeft", refToElement: Class0) => void, onResizeStop?: (event: Class3 | Class4, direction: "top" | "right" | "bottom" | "left" | "topRight" | "bottomRight" | "bottomLeft" | "topLeft", refToElement: Class0, delta: {height: number, width: number}) => void, style?: any, width?: string | number}): void;
  onMouseMove(event: Class3 | Class4): void;
  onMouseUp(event: Class3 | Class4): void;
  onResizeStart(event: Class1 | Class2, direction: "top" | "right" | "bottom" | "left" | "topRight" | "bottomRight" | "bottomLeft" | "topLeft"): void;
  render(): React$Element<any>;
  renderResizer(): Array<React$Element<{className?: string, direction: "top" | "right" | "bottom" | "left" | "topRight" | "bottomRight" | "bottomLeft" | "topLeft", onResizeStart: (e: Class1 | Class2, dir: "top" | "right" | "bottom" | "left" | "topRight" | "bottomRight" | "bottomLeft" | "topLeft") => void, replaceStyles?: any}> | null> | React$Element<{children: any, className: string, style: void | void | any}> | null;
  setSize(size: {height?: string | number, width?: string | number}): void;
  shouldComponentUpdate(nextProps: {bounds?: "parent" | "window" | Class0, children?: any, className?: string, enable?: {bottom?: boolean, bottomLeft?: boolean, bottomRight?: boolean, left?: boolean, right?: boolean, top?: boolean, topLeft?: boolean, topRight?: boolean}, extendsProps?: any, grid?: [number, number], handlerClasses?: {bottom?: string, bottomLeft?: string, bottomRight?: string, left?: string, right?: string, top?: string, topLeft?: string, topRight?: string, wrapper?: string}, handlerStyles?: {bottom?: any, bottomLeft?: any, bottomRight?: any, left?: any, right?: any, top?: any, topLeft?: any, topRight?: any, wrapper?: any}, height?: string | number, lockAspectRatio?: boolean, maxHeight?: number, maxWidth?: number, minHeight?: number, minWidth?: number, onResize?: (event: Class3 | Class4, direction: "top" | "right" | "bottom" | "left" | "topRight" | "bottomRight" | "bottomLeft" | "topLeft", refToElement: Class0, delta: {height: number, width: number}) => void, onResizeStart?: (e: Class1 | Class2, dir: "top" | "right" | "bottom" | "left" | "topRight" | "bottomRight" | "bottomLeft" | "topLeft", refToElement: Class0) => void, onResizeStop?: (event: Class3 | Class4, direction: "top" | "right" | "bottom" | "left" | "topRight" | "bottomRight" | "bottomLeft" | "topLeft", refToElement: Class0, delta: {height: number, width: number}) => void, style?: any, width?: string | number}, nextState: {direction: "top" | "right" | "bottom" | "left" | "topRight" | "bottomRight" | "bottomLeft" | "topLeft", height: number | string, isResizing: boolean, original: {height: number, width: number, x: number, y: number}, width: number | string}): boolean;
  updateSize(size: {height?: string | number, width?: string | number}): void;
}
